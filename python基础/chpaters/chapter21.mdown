# 补充知识 4
>author: 波比小金刚

<br/>
## 协程

我们前边说的实现多任务的模型都有点问题，不管多线程还是多进程<br/>
任务的切换总是消耗资源的。任务很多的时候有很大的性能瓶颈。况且锁机制，真的是很坑啊<br/>。上锁就等同于同步了，当然没有异步那样优异的性能表现了。<br/>

不管是多线程还是多进程，IO的调度来自于系统。协程则是来自于用户。<br/>

随着异步IO模型的发展，现在我们可以在单一线程中实现多任务模型，使用协程可以实现高效的并发任务。<br/>不存在切换的开销，没有锁机制。简直完美。<br/>

比如还可以搭配多进程使用，每个进程一个线程，然后在每个线程里定义若干协程。<br/>

刚开始接触协程的时候感觉似曾相识 nodejs 中的基于事件驱动模型。<br/>把事件注册到事件循环中，调用、执行完成触发回调...多么的相似。

定义一个协程很简单，使用async关键字，就像定义普通函数一样<br/>

#### 1. 首先熟悉几个概念:

1. event_loop: 是一个无限事件循环。把协程注册到这个循环，满足条件了就会调用。<br/>
2. coroutine： 协程对象。指async定义的协程函数调用的时候返回的对象。协程对象必须注册到事件循环，由事件循环来调用。
3. task: 对协程对象进一步封装而来，是Future的子类。
4. future: 将来或者是未执行的任务的结果，与 task 差不多。
5. async/await：定义协程函数的关键字和阻塞挂起的关键字。


```
## 定义一个简单的协程

now = lambda : time.time()
async def do_some(x):
    print('等待：{}'.format(x))

start = now()

## 协程函数调用得到协程对象
coroutine = do_some(2)
## 协程对象不能单独的执行，需要注册到事件循环
loop = asyncio.get_event_loop()
loop.run_until_complete(coroutine)

print('TIME :', now() - start)


# 等待：2
# TIME : 0.015625715255737305
```

通过async关键字定义一个协程（coroutine），协程也是一种对象。协程不能直接运行，需要把协程加入到事件循环（loop），由后者在适当的时候调用协程。asyncio.get_event_loop方法可以创建一个事件循环，然后使用run_until_complete将协程注册到事件循环，并启动事件循环.


协程也是一种对象。协程不能直接运行，所以run_until_complete实质是封装了一个Task来扔进池子里的，Task对象是Future的之类，上面的代码等同于:

```
## Task
now = lambda : time.time()

async def do_some(x):
    print('等待：{}'.format(x))

start = now()

## 协程不能单独的执行，需要放进事件循环
coroutine = do_some(2)
## 事件循环
loop = asyncio.get_event_loop()
## --> 创建一个task,也可以用task = asyncio.ensure_future(coroutine)
task = loop.create_task(coroutine)
print(task)
loop.run_until_complete(task)
print(task)
print('TIME :', now() - start)

# <Task pending coro=<do_some() running at E:\Python\PythonNotes\python基础\code\chapter21.py:36>>
# 等待：2
# <Task finished coro=<do_some() done, defined at E:\Python\PythonNotes\python基础\code\chapter21.py:36> result=None>
# TIME : 0.0005006790161132812
```

创建task后，task在加入事件循环之前是pending状态，task很快就执行完毕了。后面打印的finished状态。task对象表示的是未执行或者将来的任务结果。



#### 2. 绑定回调

通过add_done_callback()绑定一个回调函数到task上，就是为了获取该协程的返回值。通常这个函数的最后一个参数是一个future对象。<br/>
通过future.result()获取返回值。如果这个回调需要多个参数，可以使用偏函数模块(functools.partial)实现哎。<br/>
在我们的task执行完成的时候就会触发这个回调函数。<br/>
实质上回调中的future对象就是我们绑定的目标 task 对象。

```
# 绑定回调

now = lambda: time.time()
# 协程函数
async def do_some(x):
    print('等待：{}'.format(x))
    return '这是返回值{}'.format(x)

# 回调函数
def callback(arg1,arg2,future):
    print('callback: {} and arg1:{},arg2:{}'.format(future.result(), arg1, arg2))

start = now()
# 事件循环
loop = asyncio.get_event_loop()

# 封装task
task = loop.create_task(do_some(2))

# 利用偏函数设置多个参数，绑定回调
task.add_done_callback(functools.partial(callback, 'hello', 'world'))

# 注册到事件循环并启动事件循环
loop.run_until_complete(task)
print('TIME: ', now() - start)

# 等待：2
# callback: 这是返回值2 and arg1:hello,arg2:world
# TIME:  0.0014820098876953125
```


也可以不绑定回调函数，在协程执行状态为finish的时候去获取result()
```
now = lambda: time.time()
# 协程函数
async def do_some(x):
    print('等待：{}'.format(x))
    return '这是返回值{}'.format(x)

start = now()
# 事件循环
loop = asyncio.get_event_loop()

# 封装task
task = loop.create_task(do_some(2))
# 注册到事件循环并启动事件循环
loop.run_until_complete(task)
print('TIME: ', now() - start)
print('不绑定回调，输出结果{}'.format(task.result()))

# 等待：2
# TIME:  0.0
# 不绑定回调，输出结果这是返回值2
```


#### 3.  await

相当于生成器中的yield。能够让指定的协程挂起，事件循环就会去执行别的协程。<br/>
遇到耗时的IO操作的时候就可以用这个方式，实现异步。<br/>
这里我们用async.sleep()模拟耗时操作。<br/>

```
# await
now = lambda : time.time()

# 模拟耗时协程
async def some_func():
    await asyncio.sleep(2)
    return '耗时操作结束'

# 另一个协程，当耗时协程挂起的时候，事件循环就会执行别的协程，
# 当其他协程也挂起或者结束的时候再执行下一个。
async def another_func():
    return '这是另一个协程'

start = now()
# 事件循环
loop = asyncio.get_event_loop()

# 创建task
task1 = loop.create_task(some_func())
task2 = loop.create_task(another_func())
```



#### 4. 并发

关于并发和并行，举一个列子，并发等同于一个人同时吃三个馒头。<br/>
并行指的是三个人，一人吃一个，同时开始吃。

简单实现一个并发。假设一个简单的耗时任务。我们分别用同步执行和并发异步实现。

同步：
```
# 1. 同步的情况
now = lambda : time.time()

async def do_some(x):
    print('协程{}'.format(x))
    time.sleep(x)
    return '协程{}执行完毕'.format(x)

start = now()

tasks = [
    asyncio.ensure_future(do_some(1)),
    asyncio.ensure_future(do_some(2)),
    asyncio.ensure_future(do_some(4))
]

loop = asyncio.get_event_loop()

# asyncio.gather(*tasks) 接受一堆task
# asyncio.wait(tasks) 接受一个列表
loop.run_until_complete(asyncio.wait(tasks))

for task in tasks:
    print(task.result())

print('TIME: ', now() - start)

# 协程1
# 协程2
# 协程4
# 协程1执行完毕
# 协程2执行完毕
# 协程4执行完毕
# TIME:  7.031957149505615
```

并发：
```
# 2.　并发的情况
now = lambda : time.time()

async def do_some(x):
    print('协程{}'.format(x))
    await asyncio.sleep(x)
    return '协程{}执行完毕'.format(x)

start = now()

tasks = [
    asyncio.ensure_future(do_some(1)),
    asyncio.ensure_future(do_some(2)),
    asyncio.ensure_future(do_some(4))
]

loop = asyncio.get_event_loop()

# asyncio.gather(*tasks) 接受一堆task
# asyncio.wait(tasks) 接受一个列表
loop.run_until_complete(asyncio.wait(tasks))

for task in tasks:
    print(task.result())
print('TIME: ', now() - start)

# 协程1
# 协程2
# 协程4
# 协程1执行完毕
# 协程2执行完毕
# 协程4执行完毕
# TIME:  4.015275716781616
```

同步执行的话时间应该是1+2+4秒左右，并发执行的话，在这个案例中应该是4秒左右。



#### 5. 协程的嵌套

这是一种非常灵活的模式，通过 await 后边跟一个协程实现嵌套。<br/>
相当于把一个协程封装在了另一个协程里面，并挂起。

```
# 协程嵌套

now = lambda : time.time()

# 任务协程
async def do_some(x):
    print('协程{}'.format(x))
    await asyncio.sleep(x)
    return '协程{}执行完毕'.format(x)

# 主协程
async def main():
    tasks = [
        asyncio.ensure_future(do_some(1)),
        asyncio.ensure_future(do_some(2)),
        asyncio.ensure_future(do_some(4))
    ]
    
    dones, pendings = await asyncio.wait(tasks)

    for task in dones:
        print(task.result())

    return 'main协程执行完毕'
start = now()

loop = asyncio.get_event_loop()
main_task = loop.create_task(main())
loop.run_until_complete(main_task)
print(main_task.result())
print('TIME: ', now() - start)

# 协程1
# 协程2
# 协程4
# 协程4执行完毕
# 协程1执行完毕
# 协程2执行完毕
# main协程执行完毕
# TIME:  4.014368295669556
```

如果使用的是 asyncio.gather创建协程对象，那么await的返回值就是协程运行的结果.
```
results = await asyncio.gather(*tasks)
for result in results:
    print(result)
```

也可以在main里返回挂起的协程，在外边处理
```
now = lambda : time.time()

# 任务协程
async def do_some(x):
    print('协程{}'.format(x))
    await asyncio.sleep(x)
    return '协程{}执行完毕'.format(x)

# 主协程
async def main():
    tasks = [
        asyncio.ensure_future(do_some(1)),
        asyncio.ensure_future(do_some(2)),
        asyncio.ensure_future(do_some(4))
    ]

    return await asyncio.wait(tasks)
start = now()
loop = asyncio.get_event_loop()
main_task = loop.create_task(main())
dones, pendings = loop.run_until_complete(main_task)
for i in dones:
    print(i.result())
print('TIME: ', now() - start)
```


#### 6. 停止

通过获取task，然后执行task.cancel()来停止协程。当然还得停止事件循环。
返回结果中True表示cancel成功。

```
# 停止
now = lambda : time.time()
# 任务协程
async def do_some(x):
    print('协程{}'.format(x))
    await asyncio.sleep(x)
    return '协程{}执行完毕'.format(x)

# 主协程
async def main():
    tasks = [
        asyncio.ensure_future(do_some(1)),
        asyncio.ensure_future(do_some(2)),
        asyncio.ensure_future(do_some(4))
    ]
    a = 1/0
    dones, pendings = await asyncio.wait(tasks)

    for task in dones:
        print(task.result())
start = now()
loop = asyncio.get_event_loop()
main_task = loop.create_task(main())
try:
    loop.run_until_complete(main_task)
except ZeroDivisionError  as e:
    print(asyncio.Task.all_tasks())
    print(asyncio.gather(*asyncio.Task.all_tasks()).cancel())
    loop.stop()
    loop.run_forever() # 这里要再次启动事件循环，最后在finally中close()
finally:
    loop.close()
print('TIME: ', now() - start)
```



#### 7. 多线程中的事件循环

在当前线程中创建一个事件循环，然后在一个新的线程中去启动。
当前的线程并不会block。

```
# 7. 多线程中的事件循环
from threading import Thread
now = lambda : time.time()
# 开启事件循环
def start_loop(loop):
    asyncio.set_event_loop(loop)
    loop.run_forever()

# more jobs
def more_jobs(x):
    print('more jobs {}'.format(x))
    time.sleep(x)
    print('more jobs {} is over'.format(x))

start = now()

# 在当前线程创建一个事件循环
new_loop = asyncio.new_event_loop()

# 创建线程
t = Thread(target=start_loop , args=(new_loop,))
# 启动线程，启动事件循环
t.start()

new_loop.call_soon_threadsafe(more_jobs, 6)
new_loop.call_soon_threadsafe(more_jobs, 3)


# more jobs 6
# more jobs 6 is over
# more jobs 3
# more jobs 3 is over
```
当前线程创建一个事件循环，然后在新建一个线程，在新线程中启动事件循环。当前线程不会被block。执行是同步的，需要大概9秒


#### 8. 并发的多线程和协程模型

这里执行是并发的，需要大概6秒
```

# 并发的多线程和协程模型

from threading import Thread
now = lambda : time.time()
# 开启事件循环
def start_loop(loop):
    asyncio.set_event_loop(loop)
    loop.run_forever()

# more jobs
async def more_jobs(x):
    print('more jobs {}'.format(x))
    await asyncio.sleep(x)
    print('more jobs {} is over'.format(x))

start = now()

# 在主线程创建一个事件循环。
new_loop = asyncio.new_event_loop()

# 创建一个新的线程用来启动主线程中创建的事件循环
t = Thread(target=start_loop , args=(new_loop,))
t.start()

asyncio.run_coroutine_threadsafe(more_jobs(6), new_loop)
asyncio.run_coroutine_threadsafe(more_jobs(3), new_loop)

# more jobs 6
# more jobs 3
# more jobs 3 is over
# more jobs 6 is over
```
