# 补充知识 2
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter19.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介

### 多进程

我们在前边已经熟悉了Python中的<a href="./chapter13.mdown">多线程操作</a>。
<br/>
进程是一个CPU执行的时间片段，它的上下文被细粒度更小的线程共享。<br/>
前边也提到了多任务模式与我们的生活息息相关。
对于多任务模式，常用的开发模型就是两种：
1. 一个进程里面多个线程
2. 多个进程，每个进程一个线程；或者多个线程


### 1. multiprocessing模块

multiprocessing模块是一个跨平台的多进程模块。<br/>

```
# 子程序执行的方法
def run_in_child(name):
    print('子程序名称{},ID是{}'.format(name, os.getpid()))
    print('父进程ID是{}'.format(os.getppid()))

def main_process():
    print('父进程ID{}是'.format(os.getpid()))
    p = Process(target=run_in_child, args=('child_process',))# 创建子进程实例
    print('启动子进程')
    p.start() # 启动进程
    p.join()  # 同步等待结束之后执行
    print('子进程结束')
if __name__ == '__main__':
    main_process()

# 父进程ID552是
# 启动子进程
# 子程序名称child_process,ID是8476
# 父进程ID是552
# 子进程结束
```

### 2. 进程池

常见的还是进程池开发多进程。需要使用Pool

```
# 2. 进程池
from multiprocessing import Pool
import os, time, random

def run_in_child(name):
    print('子程序{},ID是{}'.format(name, os.getpid()))
    start = time.time()
    time.sleep(random.random() * 5)
    end = time.time()
    print('子进程{}运行了{:.2}s'.format(name, end-start))

def main_process():
    print('父进程ID{}'.format(os.getpid()))
    p = Pool(4) # 创建容量为4的进程池
    for i in range(0,5):
        p.apply_async(run_in_child, args=(i,))
    p.close()
    p.join()
    print('所有进程都结束了')
if __name__ == '__main__':
    main_process()

# 父进程ID11084
# 子程序1,ID是15556
# 子进程1运行了3.0s
# 子程序0,ID是1288
# 子进程0运行了4.2s
# 子程序3,ID是12556
# 子进程3运行了4.6s
# 子程序2,ID是13560
# 子进程2运行了2.1s
# 子程序4,ID是13560
# 子进程4运行了4.9s
# 所有进程都结束了
```



## 3. 进程之间的Queue通信

multiprocessing模块封装了进程之间进行通信的底层代码。

```
# 3. 进程之间的通信
from multiprocessing import Process, Queue
import os, time, random

# 往queue中写入数据
def write_in_queue(q):
    print('进程{}开始写入数据'.format(os.getpid()))
    i='test'
    print('写入{}'.format(i))
    q.put(i)
    time.sleep(random.random())


# 往queue中读取数据
def read_from_queue(q):
    print('进程{}开始读取数据'.format(os.getpid()))
    _q = q.get()
    print('读取到数据{}'.format(_q))

def main_process():
    print('父进程{}'.format(os.getpid()))
    q = Queue()

    pw = Process(target=write_in_queue, args=(q,))
    pr = Process(target=read_from_queue, args=(q,))

    # 启动子进程
    pw.start()
    pr.start()

    # 等待写完
    pw.join()
    pr.join()

    # 强行结束
    pr.terminate()


if __name__ == '__main__':
    main_process()

# 父进程12872
# 进程17680开始读取数据
# 读取到数据test
# 进程20208开始写入数据
# 写入test
```


## 4. 同步锁

与多线程的如出一辙

```
import multiprocessing
import sys

def worker_with(lock, f): # 使用 with 的写法
    with lock:
        fs = open(f, 'a+')
        n = 10
        while n > 1:
            fs.write("Lockd acquired via with\n")
            n -= 1
        fs.close()
        
def worker_no_with(lock, f):
    lock.acquire()
    try:
        fs = open(f, 'a+')
        n = 10
        while n > 1:
            fs.write("Lock acquired directly\n")
            n -= 1
        fs.close()
    finally:
        lock.release()
    
if __name__ == "__main__":
    lock = multiprocessing.Lock()
    f = "file.txt"
    w = multiprocessing.Process(target = worker_with, args=(lock, f))
    nw = multiprocessing.Process(target = worker_no_with, args=(lock, f))
    w.start()
    nw.start()
    print "end"
```


## 5. pipe

Pipe方法返回(conn1, conn2)代表一个管道的两个端。Pipe方法有duplex参数，如果duplex参数为True(默认值)，那么这个管道是全双工模式，也就是说conn1和conn2均可收发。duplex为False，conn1只负责接受消息，conn2只负责发送消息。
 
send和recv方法分别是发送和接受消息的方法。例如，在全双工模式下，可以调用conn1.send发送消息，conn1.recv接收消息。如果没有消息可接收，recv方法会一直阻塞。如果管道已经被关闭，那么recv方法会抛出EOFError。

```
# pipe
import multiprocessing
import time

def proc1(pipe):
    i = 'hello world'
    pipe.send(i)
    print('接收到{}'.format(pipe.recv()))
    time.sleep(1)

def proc2(pipe):
    print('接收{}'.format(pipe.recv()))
    pipe.send('hello too!')
    time.sleep(1)

if __name__ == '__main__':
    print('主线程')
    pipe = multiprocessing.Pipe()
    p1 = multiprocessing.Process(target=proc1, args=(pipe[0],))
    p2 = multiprocessing.Process(target=proc2, args=(pipe[1],))

    p1.start()
    p2.start()

    p1.join()
    p2.join()
```