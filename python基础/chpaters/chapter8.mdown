# 面向对象编程
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter8.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介 

面向对象是一种程序设计思想，简称OOP。具有封装、继承、多态的特征。<br/>
可以说，python中一切皆是对象。这里需要引入类(class)的概念，类是一个模子、设计蓝图，实例化得到对应的对象，封装了属性和行为。<br/>
在python中，一个int值也是一个对象。是int类的实例对象。这点与java或者c不同。

## 语法

```
class Person():
    pass
```

## 实例

1. 一个简单的实例

```
# 一个简单的实例
class myClass():
    """
    一个简单的实例
    """
    name = 'tom'
    def sayHello(self):
        return 'hello world'

a = myClass()
print('类变量: {}'.format(a.name)) # 类变量: tom
print('方法输出: {}'.format(a.sayHello())) # 方法输出: hello world
```

这里引出几个概念及知识点:
1. 类变量，就是类里方法外定义的变量。可以被所有实例化对象访问。
2. 实例变量，就是方法里边的变量。只能被当前的实例对象访问。
3. 实例化：创建一个类的实例，类的具体对象。
4. 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
5. 类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。

2. 构造方法

```
# 构造方法
class newClass():

    '''
    含构造方法的类
    '''

    def __init__(self, message, name):
        self.m = message
        self.x = name

b = newClass('message','tom')
print('输出：{},{}'.format(b.m, b.x)) # 输出：message,tom
```

构造器的作用就是初始化对象。

3. 私有变量

```
# 私有变量
class Players():
    _name = 'Tom'
    __job = 'basketball player'

c = Players()
# 我们约定可以使用_name表示私有变量，但是，这只是约定。并不代表不可以访问。
# 如果我们用__job表示，python会认为它就是私有的，不能直接访问的，需要使用 ._类名__job访问。
print('name:{}'.format(c._name)) # name:Tom
print('job:{}'.format(c._Players__job)) # job:basketball player
```

4. 继承

```
# 继承
class Animals():

    def __init__(self, name):
        self.name = name

    def run(self):
        return '{} is running'.format(self.name)

class Cat(Animals):

    def __init__(self, name):
        self.name = name


cat = Cat('jack')
print('name is {}, and {}'.format(cat.name, cat.run())) # name is jack, and jack is running
```

类后边的圆括号里写基类，在子类中找不到的方法就会从左到右在基类中寻找。<br/>
子类还可以重写基类中的方法。

5. 多继承

```
# 多继承

class A():
    '''
    只是演示多继承，省略构造器了
    '''
    def speaker(self):
        return 'it from A'

class B():
    '''
    只是演示多继承，省略构造器了
    '''
    def speaker(self):
        return 'it from B'

class C(B, A):
    pass

print(C().speaker()) # it from B
```

6. 装饰器

装饰器的原则就是对被装饰的函数来说是完全透明的，不能影响被装饰的函数的结构和执行结果。

装饰器需要掌握的就是几个点，需要自己去理解：
> 1. 函数也是一个'变量'
> 2. 函数可以作为参数，把一个函数名作为实参传递给另外一个函数
> 3. 返回值中包含函数名，函数还可以嵌套(闭包)

```
# 装饰器

def cal(type):
    '''
    根据类型进行不同的计算
    '''
    def cal_sometype(func):
        def wrapper(*args, **kw): # (*args, **kw) 表示任意参数
            if type == 'average':
                print('这是求平均数', end=' ')
            elif type == 'sum':
                print('这是求和操作', end=' ')

            return func(*args, **kw)
        return wrapper
    return cal_sometype

@cal(type='sum')
def sum1(*args):
    return sum(args)

print(sum1(2,5,8)) # 这是求和操作 15


@cal(type='average')
def aver(*args):
    return sum(args)/len(args)
print(aver(2,5,8)) # 这是求平均数 5.0
```

7. __slots__

就是限制你给实例对象随意添加属性的

```
# __slots__
class D():
    __slots__ = ('name', 'age')

d = D()
d.name = 'jack'
d.age = 25
#d.job = 'student' # 这个会报错，只能操作__slots__定义的那些属性
```


8. @property

为了属性不可以被随意的更改，或者加以限制，需要写getter/setter方法，但是写起来太麻烦了。<br/>
最快捷的方式就是使用内置的装饰器@property,其用法就是使得方法名字和你要定义get/set的属性名字一样，再利用装饰器定义限制。

```
# @property
class Student():

    @property
    def score(self): # 相当于getter
        return self._score

    @score.setter
    def score(self, value): # 相当于setter
        if not isinstance(value, int):
            raise ValueError('score must be a number')
        if value < 0 or value > 150:
            raise ValueError('score must be 0~150')
        self._score = value

s = Student()
s.score = 80
print(s.score) # 80
s.score = 125
print(s.score) # 125
s.score = -125
print(s.score) # score must be 0~150
```