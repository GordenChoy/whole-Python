# 面向对象编程
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter8.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介 

面向对象是一种程序设计思想，简称OOP。具有封装、继承、多态的特征。<br/>
可以说，python中一切皆是对象。这里需要引入类(class)的概念，类是一个模子、设计蓝图，按照它实例化得到对应的对象，封装了定义的属性和行为。<br/>
在python中，一个int值也是一个对象。是int类的实例对象。这点与java或者c不同。<br/>
有点类似于java中的开箱拆箱。

## 语法

```
class Person():
    pass
```

## 实例

#### 1. 一个简单的实例

```
# 一个简单的实例
class myClass():
    """
    一个简单的实例
    """
    name = 'tom' # 类变量: tom
    def sayHello(self): # 方法
        return 'hello world'

a = myClass() # a 就是实例化的对象
print('类变量: {}'.format(a.name)) # 类变量: tom
print('方法输出: {}'.format(a.sayHello())) # 方法输出: hello world
```

这里引出几个概念及知识点:
1. 类变量，就是类里方法外定义的变量。可以被所有实例化对象访问。
2. 实例变量，就是方法里边的变量。只能被当前的实例对象访问。
3. 实例化：创建一个类的实例，类的具体对象。
4. 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
5. 类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。
6. 如果实例属性和类属性重名，实例属性会覆盖类属性，但不会删除。只是实例属性优先级高
```
class A():
    name = 'Tom'
a = A()
a.name="Jack"

print(a.name) # Jack
print(A.name) # Tom
del a.name #---> 删除实例属性
print(a.name) # Tom
print(A.name) # Tom
```

#### 2. 构造方法

```
# 构造方法
class newClass():

    '''
    含构造方法的类
    '''

    def __init__(self, message, name):
        self.m = message
        self.x = name

b = newClass('message','tom')
print('输出：{},{}'.format(b.m, b.x)) # 输出：message,tom
```

构造器的作用就是初始化对象。

#### 3. 私有变量

```
# 私有变量
class Players():
    # 下面两个都是定义的私有变量
    _name = 'Tom'
    __job = 'basketball player'

c = Players()
# 我们约定可以使用_name表示私有变量，但是，这只是约定。并不代表不可以访问。
# 如果我们用__job表示，python会认为它就是私有的，不能直接访问的，需要使用 ._类名__job访问。
print('name:{}'.format(c._name)) # name:Tom
print('job:{}'.format(c.__job)) # 报错，私有变量不能直接访问
print('job:{}'.format(c._Players__job)) # job:basketball player
```

#### 4. 继承

```
# 继承
class Animals():

    def __init__(self, name):
        self.name = name

    def run(self):
        return '{} is running'.format(self.name)

class Cat(Animals):

    def __init__(self, name):
        self.name = name


cat = Cat('jack')
print('name is {}, and {}'.format(cat.name, cat.run())) # name is jack, and jack is running
```

类后边的圆括号里写基类，在子类中找不到的方法就会从左到右在基类中寻找。<br/>
子类还可以重写基类中的方法。

#### 5. 多继承

在子类中找不到的方法就会从左到右在基类中寻找，找到第一个出现的就直接调用了。

```
# 多继承

class A():
    '''
    只是演示多继承，省略构造器了
    '''
    def speaker(self):
        return 'it from A'

class B():
    '''
    只是演示多继承，省略构造器了
    '''
    def speaker(self):
        return 'it from B'

class C(B, A):
    pass

print(C().speaker()) # it from B
```

#### 6. 装饰器

装饰器是利用闭包实现的，意思是用一个包装函数包裹被装饰的函数。最后返回这个装饰器函数。<br/>

装饰器的原则就是对被装饰的函数来说是完全透明的，不能影响被装饰的函数的结构和执行结果。<br/>

所以常见的装饰器的基本结构是这样的:

```
def decorator_name(func): # --> 被装饰的函数作为参数传入
     @functools.wraps(func)
    def wrapper(*args, **kw): # --> 包裹函数
        ## your code...
        return func(*args, **kw)# --> 返回被装饰函数的执行结果
    return wrapper # --> 返回包裹函数,最终执行的是这个函数
```

>@functools.wraps(func)是内置的装饰器函数，目的是解决被装饰器修饰的函数的__name__属性变成了返回的 wrapper 的问题。

一个简单的实例：

```
## 简单的装饰器函数
import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kw):
        print('log here...',end=' ')
        return func(*args, **kw)
    return wrapper

@log
def now():
    print('2017-9-16')

now() # log here... 2017-9-16
```

>这里执行 @log 其实等价于 now = log(now);

带参数的装饰器函数结构：
```
def decorator_name(*args):
    def decorator(func):
         @functools.wraps(func)
         def wrapper(*args, **kw):
            # your code ...
            return func(*args, **kw)
        return wrapper
    return decorator
```

>实现带参数的装饰器函数，就是在包装函数wrapper的外边再包装一层用来接收被包装函数。

案例：
```
## 带参数装饰器
import functools
def log(text):
    def d(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print(text, end=' ')
            return func(*args, **kw)
        return wrapper
    return d
    

@log('hello world')
def now():
    print('2017-9-16')

now() # hello world 2017-9-16
```


装饰器需要掌握的就是几个点，需要自己去理解：
> 1. 函数也是一个'变量'，函数名就是该函数的引用。
> 2. 函数可以作为参数，把一个函数名作为实参传递给另外一个函数
> 3. 返回值中包含函数名也就是该函数的引用，函数还可以嵌套(闭包)

```
# 装饰器

def cal(type):
    '''
    根据类型进行不同的计算
    '''
    def cal_sometype(func):
        @functools.wraps(func)
        def wrapper(*args, **kw): # (*args, **kw) 表示任意参数
            if type == 'average':
                print('这是求平均数', end=' ')
            elif type == 'sum':
                print('这是求和操作', end=' ')
            return func(*args, **kw)
        return wrapper
    return cal_sometype

@cal(type='sum')
def sum1(*args):
    return sum(args)

print(sum1(2,5,8)) # 这是求和操作 15


@cal(type='average')
def aver(*args):
    return sum(args)/len(args)
print(aver(2,5,8)) # 这是求平均数 5.0
```

#### 7. __slots__

就是限制你给实例对象随意添加属性的

```
# __slots__
class D():
    __slots__ = ('name', 'age')

d = D()
d.name = 'jack'
d.age = 25
#d.job = 'student' # 这个会报错，只能操作__slots__定义的那些属性
```


#### 8. @property

为了属性不可以被随意的更改，或者加以限制，<br/>我们在设计类的时候就需要把这些属性设置成私有属性(__name)，对外提供对应的getter/setter方法，但是写起来太麻烦了。<br/>
最快捷的方式就是使用内置的装饰器@property,其用法就是使得方法名字和你要定义get/set的属性名字一样，再利用装饰器定义限制。<br/>
同理，如果只提供getter，那么这个属性就是只读属性。

```
class Student():
    def __init__(self, score):
        self.__score__ = score

    @property # -->getter
    def score(self): 
        return self.__score

    @score.setter # -->setter
    def score(self, value): 
        if not isinstance(value, int):
            raise ValueError('score must be a number')
        if value < 0 or value > 150:
            raise ValueError('score must be 0~150')
        self.__score = value

s = Student(80)
#s.__score #报错
s.score = 80
s.score(60)
s.score = 60
```

#### 9. __str__ & __repr__

直接在命令行工具打印一个 class 打印出来的东西是类型、内存地址之类的信息。看起来不太方便。<br/>
可以定义 __str__ 函数来打印出你想的东西。

```
>>> class Student(object):
...     def __init__(self, name):
...         self.name = name
...     def __str__(self):
...         return 'Student object (name: %s)' % self.name
...
>>> print(Student('Michael'))
Student object (name: Michael)
```

>str() 与 repr() 的区别：<br/>
>str() 打印出来的东西是给用户看的，print()函数调用的其实就是 str()。<br/>
>repr() 打印出来的是给Python解释器看的。命令行回车后打印出来的就是repr。

```
print('hello world')
>>> hello world

s = 'hello world'
s
>>> "'hello world'"
```

#### 10. __iter__ & __next__ & __getitem__

这三个属性可以让你的类可以拥有list般的魔力，可以迭代，可以切片。

```
class Iter():

    def __init__(self):
        self.a, self.b = 0, 1

    def __iter__(self):
        return self

    def __next__(self):
        self.a, self.b = self.b, self.a+self.b
        if self.a > 150:
            raise StopIteration('该结束了，北鼻')
        return self.a

for i in Iter(): # --> 这个类实例可以迭代了
    print(i, end=" ") # 1 1 2 3 5 8 13 21 34 55 89 144
```

再让它支持索引查找。
```
class Iter():

    def __init__(self):
        self.a, self.b = 0, 1

    def __iter__(self):
        return self

    def __next__(self):
        self.a, self.b = self.b, self.a+self.b
        if self.a > 150:
            raise StopIteration('该结束了，北鼻')
        return self.a

    def __getitem__(self, n): # --> 支持索引查找
        a, b = 1, 1
        for i in range(n):
            a, b = b, a+b
        return a

for i in Iter():
    print(i, end=" ") # 1 1 2 3 5 8 13 21 34 55 89 144

print(Iter()[0], Iter()[1], Iter()[2]) # 1 1 2 # --> 支持索引查找
```

还可以支持切片查找:(liao大神案例)
```
def __getitem__(self, n):
        if isinstance(n, int): # n是索引
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice): # n是切片
            start = n.start
            stop = n.stop
            if start is None:
                start = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(a)
                a, b = b, a + b
            return L
```


#### 11. __getattr__

动态添加属性。调用实例不存在的属性的时候会报错。有这个函数后我们可以变出点有意思的：
```
### 动态属性
class Attr():
    def __init__(self, uri=''):
        self.uri = uri

    def __getattr__(self, path):
        return Attr('{}/{}'.format(self.uri, path))

    def __str__(self):
        return self.uri

    __repr__ = __str__ # 就是简便写法，让repr也返回一样的

print(Attr().C.file.pythonnotes) # /C/file/pythonnotes
```


```
# demo
class Student(object):

    def __init__(self):
        self.name = 'Michael'

    def __getattr__(self, attr):
        if attr=='score':
            return 99

s = Student()
s.name #---> Michael
s.score#--->99
```

#### 12. __call__

想想java中的反射机制。
直白的说就是类实例对象可以执行自身，自身就好比是一个函数对象一样。
```
#### 反射
class S():
    def __call__(self):
        print('类似 isinstance.method()')

s = S()
s() # 类似 isinstance.method()
```

## 总结

在开发过程中，设计类的时候需要有全面的考虑，对于一些信息，比如 类说明、作者等<br/>。
我们可以定义为类属性，所有实例都可以访问。<br/>
对于一些属性不希望外界可以直接访问，可以设置为私有变量，对外提供getter来访问。
至于setter则根据你是否希望外界可以改变这个属性来定义。
