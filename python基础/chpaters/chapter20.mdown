# 补充知识 3
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter20.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介

### 分布式多进程

在做Java有关开发的时候常常谈到所谓的分布式，其实质就是把多个任务分配到多个机器上执行。<br/>
multiprocessing模块的managers可以把多进程分布到多台机器上。<br/>
参考廖大神的demo实现一个分布式多进程案例。<br/>
进程之间的通信还是通过Queue暴露在网络上实现。<br/>


#### 主任务进程

```
## 主任务
import random, time, queue
from multiprocessing.managers import BaseManager
class Master(object):

    def __init__(self):
        self.task_que = queue.Queue()    # 任务队列
        self.result_que = queue.Queue()  # 结果队列

    def get_task_que(self):
        return self.task_que

    def get_result_que(self):
        return self.result_que

    def start(self):
        # 注册队列
        BaseManager.register("get_task_queue",callable=self.get_task_que)
        BaseManager.register("get_result_queue",callable=self.get_result_que)

        # 监听
        manager = BaseManager(address=('0.0.0.0', 5000), authkey=b'abc')
        manager.start()

        # 使用网络服务获取上面的队列，不能直接获取
        task_queue = manager.get_task_queue()
        result_queue = manager.get_result_queue()

        # 设置任务
        for i in range(10):
            r = '任务' + i
            task_queue.put(r)

        # 监听result
        for i in range(10):
            res = result_queue.get()
            print('res is {}'.format(res))

        manager.shutdown()

if __name__ == '__main__':
    m = Master()
    m.start()

```


#### 任务进程

```
# 创建类似的QueueManager:
class Task(object):
    def __init__(self):
        self.task_que = queue.Queue()    # 任务队列
        self.result_que = queue.Queue()  # 结果队列

    def start(self):
        # 注册队列
        BaseManager.register("get_task_queue")
        BaseManager.register("get_result_queue")

        # 连接master
        server = '127.0.0.1'
        manager = BaseManager(address=(server, 8888), authkey=b'abc')
        manager.connect()

        # 使用网络服务获取上面的队列，不能直接获取
        task_queue = manager.get_task_queue()
        result_queue = manager.get_result_queue()

        # run
        for i in range(10):
            r = task_queue.get(timeout=1)
            r += '--> 结果'
            print(r)
            result_queue.put(r)
if __name__ == '__main__':
    ts = Task()
    ts.start()

```