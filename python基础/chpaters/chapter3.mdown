# 函数
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter3.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介

函数是相关联或者单一的可以复用的代码块。接受输入、提供输出，几乎所有代码都可以放在函数中。

## 基本知识点

1. 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。
2. return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
3. 函数应该有文档说明，在函数体开头，用''' 或者 """ 表示，包含函数说明和示例，可以通过.__doc__查看文档

```
# 函数示例

def area(r):
    '''
    根据传入的半径计算圆的面积；
    比如:
    >>> area(1)
    3.1415926...
    '''
    return math.pi*r**2

print(area(5)) # 78.53981633974483
print(area.__doc__) # 根据传入的半径计算圆的面积；
                    #比如:
                    #>>> area(1)
                    #3.1415926...
```


## 变量的作用域

作用域其实是一套使得我们可以找目标变量的规则和规范。可以分为全局作用域和局部作用域、局部外的局部作用域(闭包)、内建作用域。作用域查找规则遵循的是由里向外，逐级往上。最外层都找不到就会抛出None。所以外层的是访问不到内层的，内层的可以访问外层的。Python中需要在局部作用域中由 global来声明全局变量，由nonlocal声明局部外局部作用域。

作用域分类:
L （Local） 局部作用域<br/>
E （Enclosing） 闭包函数外的函数中<br/>
G （Global） 全局作用域<br/>
B （Built-in） 内建作用域<br/>

查找顺序: L -> E -> G -> B

```
# 作用域示例
_x = int(5) # 内建作用域 B
_y = 5 # 全局作用域 G
def _test1():
    _z = 5 # 局部外局部作用域 E
    def _test2():
        _d = 5 # 局部作用域 L
```


与java、javascript等语言不同的是，在Python中只有模块(module)、类(class)、函数(def, lambda) 才会引入新的作用域。而其他的比如if...elif之类的并不会引入新的作用域，也就是说，在if里的变量，外界也可以直接访问.

```
# 访问if内的变量
if(1):
    _test3 = 5

print(_test3) #5
```


## 局部与全局作用域

```
# 变量的作用域

name = 'James Kyle'

def _changeName(new_name):
    '''
    改变名称的方法；
    比如： _changeName('james')
    '''
    name = new_name # 这里的name会被认为是一个局部变量，并不会改变全局变量name
                    # 解决这一问题需要global 声明，具体见代码chapter3.py

def _sayHello():
    '''
    sayhello的function；
    比如： _sayHello('james')
    输出: hello james
    '''
    print('hello, {}'.format(name))

_sayHello() # hello, James Kyle
_changeName('tom')
_sayHello() # hello, James Kyle
```

用nonlocal的情况:

```
# 修改非外层全局作用域
# 只有用nonlocal才有效果，改成global，都没这个全局声明，肯定是无效的
def __test():
    __num = 5
    def __change():
        # nonlocal __num    #加上这个nonlocal后 输出 inner:  6 ,outer 6
        __num = 6
        print('inner: ',__num, end=' ,outer ')
    __change()
    return __num

print(__test()) # inner:  6 ,outer 5
```

一种常见的错误实例:

```
# 常见的错误
a = 10
def __error():

    '''
    常见错误函数
    '''
    a += 1 # 局部变量“a”在赋值前被引用
    print(a) 

__error()

```


## 参数传递

在Python中一切皆是对象，对象是有类型的，但是变量是没有类型的。变量是一个引用，也可以说是一个指针，保存了一个地址指向一个内存中的数据。

### mutable 和 immutable对象

Python中immutable对象包括：字符串、数字、元组；
mutable对象包括：列表、字典；

其实可变和不可变我们可以这样去理解：

不可变对象指的是其引用指向的对象始终是不变的, '更改值'只是会抛弃以前的值。引用再次指向新生成的对象，不可变对象是不可以更改的；

```
a = 5
a = 10
print(a) # 10
# a 原本指向 5，后来5被抛弃，a指向了新生成的值10
```

可变对象则是引用和值本身都没变化，变化的是值内部的数据，没有新生成对象,还是指向以前的那个对象；

```
a = [1,2]
a[0] = 5
print(a) # [5,2]
# 并没有产生新的值，只是在原来的值的内部发生了更改
```

### python中的参数传递可以近似为引用传递

严格意义上说Python中是引用传递并不准确，但是我们可以近乎这么去理解。
传递一个参数的时候，会拷贝它的引用。传递的是这个拷贝的引用；
所以我们可以得出下面的结论:

1. 传递的是不可变对象参数的时候，实际上传递的是这个不可变对象的引用的拷贝，所以在对这个参数做更改时，会生成新的对象，但是不会影响到原来的引用指向的对象。

2. 传递是可变参数对象的时候，传递的也是该参数的引用的拷贝，但是因为都是指向这个可变对象，而可变对象在更改的时候不会生成新的对象，而是在原来的基础上做修改，所以会影响原来的引用指向的对象。

接下来我们来证明:

```
# 不可变对象
num = 5
def set1(x):
    """
    设置值为1的方法
    """
    x = 1
set1(num)
print(num) # 5，就是拷贝一个引用 b 指向5 ，然后这个 b 指向新对象 1，但是num的指向没变化

# 可变对象
list1 = [1, 2, 3]
def updateList(l):
    l[0] = 'test'

updateList(list1)
print(list1) # ['test', 2, 3] 就是拷贝一个引用 b 指向[1, 2, 3] ，改变第一个值为test的时候并没有生成新对象，引用都是指向这个对象。
```


## 参数类型

1. 关键字参数

函数调用使用关键字参数来确定传入的参数值，使用关键字参数允许函数调用时参数的顺序与声明时不一致。一旦使用关键字参数，其后的参数都要使用关键字参数，否则会报错。

```
# 关键字参数
def _someWords(age, name, job):
    '''
    打印一句话的函数
    '''
    print("i'm {} and i'm a {} who age is {} ".format(name, job, age))
    return;

_someWords(age=25, name='jack', job='student') # i'm jack and i'm a student who age is 25
_someWords(name='tom', age=18, job='coolboy') # i'm tom and i'm a coolboy who age is 18
```

2. 默认参数

调用函数时，如果没有传递参数，则会使用默认参数,默认参数必须放在最后面.

```
# 默认参数
def _someInfo(name, age, job='student'):
    '''
    打印一句话的函数
    '''
    print("i'm {} and i'm a {} who age is {} ".format(name, job, age))
    return;

_someInfo('tom',age=18) # i'm tom and i'm a student who age is 18 
```

注意： 默认参数有一个很大的坑，就是定义默认参数的时候不能是可变对象，比如列表。

```
# 踩坑
def test_m(L = []):
    L.append('END')
    print(L)
test_m() # ['END']
# 再调用
test_m() # ['END', 'END']
```

因为L 始终指向的是一个可变对象，虽然传递的是引用的拷贝，但是因为指向不变，就会在可变对象上不断的添加元素。与我们的设计不符。<br/>
解决的办法就是让它指向不变对象。比如改成 

```
# 优化
def test_m(L = None):
    if L is None:
        L = []
    L.append('END')
    print(L)
test_m() # ['END']
# 再调用
test_m() # ['END']
```

3. 不定长参数

实际传入的参数可以多于当初声明的参数个数。<br/>
变量前面需要加一个 * 来表示存放所有未命名的变量参数的元祖。多余的参数会放进这个元组中，没有多余的这就是个空元组。<br/>
在不定长参数后边的参数必须是关键字参数。因为不定长参数是可以有也可以没有，所以它后边的参数必须用关键字参数来避免歧义。<br/>比如someFunc(a,b,*,city),调用的话必须是
someFunc(1,2,city='chengdu')

```
# 不定长参数
def getArr( *arr ):
    '''
    打印参数
    '''
    for i in arr:
        print('输出:',i, end=' ')

    return;

getArr() # 啥也没有输出
getArr(10,20,30,40) # 输出: 10 输出: 20 输出: 30 输出: 40
```

补充:
如果是　** 表示的是多余的参数放进一个字典中。参数需要写成key=value的形式。

```
# 补充说明 不定长参数 **的使用
def _dictTest(a, b, **c):
    print(a, b, c)

print(_dictTest('china', 'sichuan', city='chengdu', area='jinjiang'))
#china sichuan {'area': 'jinjiang', 'city': 'chengdu'}
#print(_dictTest('china', 'sichuan', 'chengdu', 'jinjiang')) # 报错
```

对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。

## 匿名函数

python 使用 lambda 来创建匿名函数。
所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。<br/>
lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数<br/>
lambda 函数使得函数定义更加简单，但又有不是很容易读懂的风险，所以应该酌情使用。<br/>
lambda 也可以使用关键字参数，也可以设定默认参数。<br/>
语法: lambda 参数: 函数体

```
# 匿名函数

global_num = 1000
myFunc = lambda x: x+global_num
print(myFunc(1)) # 1001

# 配合全局函数 filter, map, reduce使用
test_list = [0,1,2,3,4,5,6,7,8,9]
new_list1 = filter( lambda i: i%2 == 0, test_list )
print(list(new_list1)) # [0, 2, 4, 6, 8]

# 但是lambda在这里个人感觉还不如 for...in...if清晰好用
print([x for x in test_list if x % 2 == 0]) # [0, 2, 4, 6, 8]

# map
new_list2 = map( lambda x: x * 2 + 10, test_list )
print(list(new_list2)) #[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]
print([x*2+10 for x in test_list]) #[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]

# reduce
# python3中从全局移除了reduce,放进了functools中。
val = functools.reduce( lambda x, y: x+y, test_list)
print(val) # 45
```


## 递归函数和尾递归优化

递归简单的说就是自己调用自己，我们通过一个数学模型来熟悉这个概念。<br/>
比如要计算 n 的阶乘，数学上就是 1 X 2 X 3 X ... n,
我们用式子写出来就是 n! = n * (n-1)!,没毛病吧。
我们定义一个函数实现
```
# 递归函数和尾递归优化

def fact(n):
    if n == 1:
        return 1
    else:
        return n * fact(n-1)

print(fact(5)) # 120
```

递归实现简洁清晰，但是有一个隐患：<br/>
函数调用是会促使栈(stack)开辟一个栈帧来实现这个调用，递归的量太大了就会造成栈内存溢出。<br/>
解决的办法就是尾递归优化：<br/>
    就是让递归在一个栈帧内完成，尾递归调用实现就是让他返回自身函数，所以就会一直在一个栈帧中不停的调用自己，同时return中不能有表达式存在。

```
# 尾递归优化
def fact2(n):
    return fact_iter(n, 1)

def fact_iter(num, p):
    if num == 1:
        return p
    return fact_iter(num-1, num*p)

print(fact2(5)) #120
```

ps: 标准的python解释器没有做尾调用优化，所以就是上边的fact2()也会溢出。


## 内置函数 map(), reduce(), filter(),sorted()

### 1. map

```
# 1. map(func,list); 和js中的一样，就是列表每个元素都会执行一次func
list = [0,1,2,3,4,5,6,7,8,9]
_list1 = map(lambda x: x*2+10, list)
print(_list1) #[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]
```

### 2. reduce()

reduce(func(now,next), list);

其中func(now,next)必须接受两个参数，表示当前的和接下来的结果。

```
# reduce
# python3中从全局移除了reduce,放进了functools中。
val = functools.reduce( lambda x, y: x+y, [0,1,2,3,4,5,6,7,8,9])
print(val) # 45
```

### 3. filter()

filter(func(),list)

筛选函数

```
## 获取所有的素数

# 1. 利用生成器，获取所有奇数，从3开始。
def _if_odd():
    n = 1
    while True:
        n += 2
        yield n
# 2. 筛选函数，筛选掉其倍数。
def _filter(s):
    return lambda x: x % s > 0

# 3. 定义一个生成器，返回结果
def _primes():
    yield 2
    it = _if_odd()
    while True:
        n = next(it)
        yield n
        it = filter(_filter(n), it)
for i in _primes():
    if i < 20:
        print(i,end=' ') # 2 3 5 7 11 13 17 19
    else:
        break
```



### 4. sorted

排序函数

sorted(list, key=func, reverse=True); <br/>key函数表示排序的元素都会先执行这个函数，reverse表示反转。

```
## sorted
sorted_list1 = sorted([1,2,-8,55,99])
sorted_list2 = sorted([1,2,-8,55,99], key=abs)
sorted_list3 = sorted([1,2,-8,55,99], key=abs, reverse=True)
print(sorted_list1) # [-8, 1, 2, 55, 99]
print(sorted_list2) # [1, 2, -8, 55, 99]
print(sorted_list3) # [99, 55, -8, 2, 1]
```