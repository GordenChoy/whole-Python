# 正则表达式
>author: 波比小金刚

<br/>

千里之行，始于足下。
几乎所有的编程语言都是始于数据存储、运算、逻辑...
so, 开始我们的python旅程。
本章节代码都在./code/chapter10.py
<a href="#">图片没加载出来，请直接下载并打开对应的html页面</a>

## 简介

正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。
<br/>
<br/>
正则表达式是程序员需要掌握的技能，会有专门的一个专题对正则表达式的原理、零宽断言、回溯等做分析，本章节属于初级内容，只需要掌握基本的 re 模块使用。
<br/>
<br/>
参见: <a href='https://docs.python.org/3/library/re.html'> re模块 </a>


## re模块

```
# re.compile(pattern, flags=0) Pattern实例的工厂方法

pattern = re.compile(r'h(?=e)\w+')

match = pattern.match('hello world')

if match:
    print(match.group()) # hello


# re.match(pattern, string, flags=0) 

match2 = re.match(r'h(?=e)\w+', 'HELLO world', re.I)

if match2:
    print(match2.group()) # HELLO

# 使用compile的好处是可以复用
# 模式: 
#     re.I  使匹配对大小写不敏感
#     re.L  做本地化识别（locale-aware）匹配
#     re.M  多行匹配，影响 ^ 和 $
#     re.S  使 . 匹配包括换行在内的所有字符
#     re.U  根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
#     re.X  该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。      
# 模式可以混合使用  比如 re.I | re.S

# Match对象
# Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息
# 1. string: 匹配时使用的文本
# 2. re: 匹配时使用的Pattern对象
# 3. pos: 文本中正则表达式开始搜索的索引
# 4. endpos: 文本中正则表达式结束搜索的索引
# 5. lastindex: 最后一个被捕获的分组在文本中的索引
# 6. lastgroup: 最后一个被捕获的分组的别名

## 方法:
# .group([group1, …]) 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回
# .groups([default])  以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)
# .groupdict([default]) 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内
# .start([group]) 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）group默认值为0
# .end([group]) 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1)group默认值为0
# .span([group]): 返回(start(group), end(group))。
# expand(template): 将匹配到的分组代入template中然后返回。
#                   template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0

# demo
m = re.match(r'(\d+)(\w+)(?P<sing>.*)', '123abc!')

print(m.string) # 123abc!
print(m.re) # re.compile('(\\d+)(\\w+)(?P<sing>.*)')
print(m.pos) # 0 起始位置是1的左边哦
print(m.endpos) # 7
print(m.lastindex) # 3
print(m.lastgroup) # sing
print(m.group()) # 123abc!
print(m.group(1,2)) # ('123', 'abc')
print(m.groups()) # ('123', 'abc', '!')
print(m.groupdict()) # {'sing': '!'}
print(m.start(2)) # 3
print(m.end(2)) # 6
print(m.span(2)) # (3, 6)
print(m.expand(r'\2\1\3')) # abc123!


# search()

# 1. re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；
#   而re.search匹配整个字符串，直到找到一个匹配
# 2. re.search()和pattern.seacrch()有区别在于patter.search()
#   可以指定参数pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数

p = re.compile(r'abc')

match3 = p.match('123abc')

if match3:
    print(match3.group())
else:
    print('no match3') # no match3

match4 = re.search(r'abc', '123abc')
if match4:
    print(match4.group()) # abc
else:
    print('no match4') 
match5 = p.search('123abc',3, len('123abc'))
if match5:
    print(match5.group()) # abc
else:
    print('no match5') 

# split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])
mm = re.split('a', '1a2a3')
print(mm) # ['1', '2', '3']

# findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])
ss = re.findall(r'\d', 'aaa1s2d3df')
print(ss) # ['1', '2', '3']

# finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])
# 注意这个方法返回的是一个Match对象迭代器
it = re.finditer(r'\d', 'dwqd32f4fwef4')
for i in it:
    print(i.group(), end=' ') # 3 2 4 4

# sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]): 
# 使用repl替换string中每一个匹配的子串后返回替换后的字符串
#当repl是一个字符串时，可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。 
#当repl是一个方法时，这个方法应当只接受一个参数（Match对象），
#并返回一个字符串用于替换（返回的字符串中不能再引用分组）。 
#count用于指定最多替换次数，不指定时全部替换。 

pp = re.compile(r'(\w+) (\w+)')

str = 'hello tom' 

print(pp.sub(r'\2 \1', str)) # tom hello

def fun(m):
    return m.group(1).title()+ ' ' + m.group(2).title()

print(pp.sub(fun, str)) # Hello Tom

```

